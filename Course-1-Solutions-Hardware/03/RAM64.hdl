// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Finding the specific ram, looking at the first 3 MSB (most significant bits) of address.
    // So the intuition for the DMux is the same as RAM8 to determine which address we are going to load into
    // However, in this case we determine which RAM8 to operate on
    DMux8Way(in=load, sel=address[3..5], a=dmuxa, b=dmuxb, c=dmuxc, d=dmuxd, e=dmuxe, f=dmuxf, g=dmuxg, h=dmuxh);

    // After the DMux gives the specific RAM8, we can operate on one of the registers in that specific RAM8.
    // This register is found by address inputs LSB (least significant bits).
    RAM8(in=in, load=dmuxa, address=address[0..2], out=out1);
    RAM8(in=in, load=dmuxb, address=address[0..2], out=out2);
    RAM8(in=in, load=dmuxc, address=address[0..2], out=out3);
    RAM8(in=in, load=dmuxd, address=address[0..2], out=out4);
    RAM8(in=in, load=dmuxe, address=address[0..2], out=out5);
    RAM8(in=in, load=dmuxf, address=address[0..2], out=out6);
    RAM8(in=in, load=dmuxg, address=address[0..2], out=out7);
    RAM8(in=in, load=dmuxh, address=address[0..2], out=out8);
    // With the Mux, we can read the value of the register specified by the address.
    // The above 8 RAM8s knows which register to look at, so we just tell which RAM8 (MSB / leftmost bits) we want to read from below
    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address[3..5], out=out);
   }